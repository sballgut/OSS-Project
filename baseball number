#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <Windows.h>
#include <string.h>
#define RANKING_FILE "ranking.txt"
#define MAX_RANKING_ENTRIES 10

// 함수 선언
void generateRandomNumber(int* number, int digitCount);
void getUserInput(int* guess, int digitCount);
void checkGuess(int* targetNumber, int* userGuess, int digitCount, int* strikes, int* balls);
void showShop(int* score, int digitCount, int* targetNumber);
void buyHint(int digitCount, int* score, int* targetNumber);
void showAchievement(int attempts);
void printGameUI(int* targetNumber, int* userGuess, int digitCount, int strikes, int balls, int attempts);


int* userGuess;
struct Player {
    char name[50];
    int score;
};
void updateRanking(struct Player player);
// 랭킹 정보 출력 함수
void displayRanking();
int comparePlayers(const void* a, const void* b) {
    return ((struct Player*)b)->score - ((struct Player*)a)->score;
}

void printGameUI(int* targetNumber, int* userGuess, int digitCount, int strikes, int balls, int attempts) {
    system("cls");  // 화면을 지우고

    printf("■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n");
    printf("■        Attempts: %-2d        ■\n", attempts);
    printf("■                            ■\n");
    printf("■        Strikes: %-2d         ■\n", strikes);
    printf("■        Balls  : %-2d         ■\n", balls);
    printf("■                            ■\n");
    printf("■                            ■\n");
    printf("■                            ■\n");
    printf("■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n");

    // 여기서 필요한 경우 targetNumber 등을 활용하여 게임 상태를 출력

}

    // 여기서 필요한 경우 targetNumber 등을 활용하여 게임 상태를 출력

int main() {
    int difficulty;
    int strikes, balls;
    int maxAttempts = 7;
    int score = 0; // 새로운 변수: 점수
    
    while (1) {
        printf("난이도를 선택하세요 (1: 3자리, 2: 4자리, 3: 5자리): ");
        scanf("%d", &difficulty);

        if (difficulty > 3) {
            printf("올바른 난이도를 선택하세요.\n");
            continue;
        }
        else if (difficulty > 0 && difficulty < 4) {
            break;
        }
    }

    int digitCount;

    switch (difficulty) {
    case 1:
        digitCount = 3;
        break;
    case 2:
        digitCount = 4;
        break;
    case 3:
        digitCount = 5;
        break;
    default:
        return 1;
    }

    srand(time(NULL));

    int* targetNumber;
    int* userGuess;

    while (1) {
       
        targetNumber = malloc(digitCount * sizeof(int));
        userGuess = malloc(digitCount * sizeof(int));
        

        generateRandomNumber(targetNumber, digitCount);

        printf("=== 숫자야구 게임 시작 (난이도: %d) ===\n", difficulty);
        printf("\n");

        int attempts = 0;
        int strikes = 0; // 초기화 추가
        int balls = 0;
        do {
            printGameUI(targetNumber, userGuess, digitCount, strikes, balls, attempts);



            getUserInput(userGuess, digitCount);
            checkGuess(targetNumber, userGuess, digitCount, &strikes, &balls);

          

            attempts++;

        } while (strikes != digitCount && attempts < maxAttempts);

        if (strikes == digitCount) {
            printf("\n");

            // 업적 표시
            showAchievement(attempts);

            // 정답을 맞춘 경우에 따라 점수를 부여
            if (digitCount == 3) {
                score += 5;
            }
            else if (digitCount == 4) {
                score += 7;
            }
            else if (digitCount == 5) {
                score += 10;
            }
        }
        else {
            printf("\n");
            printf("게임 오버! 정답은 ");
            for (int i = 0; i < digitCount; ++i) {
                printf("%d", targetNumber[i]);
            }
            printf("입니다.\n\n");
        }

        // 게임이 끝난 후 메모리 해제
        free(targetNumber);
        free(userGuess);

        // 사용자에게 다시 플레이할 것인지 물어보기
        char playAgain;
        printf("다시 플레이하시겠습니까? (y/n): ");
        scanf(" %c", &playAgain);

        if (playAgain != 'y' && playAgain != 'Y') {
            break; // 게임 종료
        }

        // 다시 할 경우 난이도 선택
        while (1) {
            strikes = 0;
            balls = 0;
            printf("난이도를 선택하세요 (1: 3자리, 2: 4자리, 3: 5자리): ");
            scanf("%d", &difficulty);

            if (difficulty > 3) {
                printf("올바른 난이도를 선택하세요.\n");
                continue;
            }
            else if (difficulty > 0 && difficulty < 4) {
                break;
            }
        }

        // 다시 할 경우 메모리 재할당
        targetNumber = malloc(digitCount * sizeof(int));
        userGuess = malloc(digitCount * sizeof(int));

        // 게임 시작 메시지 다음에 빈 줄 출력
        system("cls");

        // 상점에서 힌트를 구매할 수 있도록 추가
        showShop(&score, digitCount, targetNumber);
    }

    // 모든 게임이 종료되면 최종 점수 출력
    printf("최종 점수: %d\n", score);
    struct Player currentPlayer;
    printf("플레이어 이름을 입력하세요: ");
    scanf("%s", currentPlayer.name);

    currentPlayer.score = score;
    updateRanking(currentPlayer);
    displayRanking();

    return 0;
}

void generateRandomNumber(int* number, int digitCount) {
    for (int i = 0; i < digitCount; ++i) {
        number[i] = rand() % 10;
    }
}

void getUserInput(int* guess, int digitCount) {
    int validInput;

    do {
        validInput = 1; // 입력이 유효하다고 가정하고 시작

        printf("%d자리 숫자를 입력하세요: ", digitCount);

        for (int i = 0; i < digitCount; ++i) {
            if (scanf("%1d", &guess[i]) != 1) {
                printf("올바른 숫자를 입력하세요.\n");

                // 입력 버퍼 비우기
                int c;
                while ((c = getchar()) != '\n' && c != EOF);

                validInput = 0; // 입력이 유효하지 않음
                break;
            }
        }

        // 입력이 숫자가 아닌 문자를 포함하는지 확인
        if (validInput) {
            for (int i = 0; i < digitCount; ++i) {
                if (guess[i] < 0 || guess[i] > 9) {
                    printf("올바른 숫자를 입력하세요.\n");
                    validInput = 0; // 입력이 유효하지 않음
                    break;
                }
            }
        }

    } while (!validInput);
}

void checkGuess(int* targetNumber, int* userGuess, int digitCount, int* strikes, int* balls) {
    *strikes = 0;
    *balls = 0;

    // 배열을 통해 중복된 숫자를 처리하기 위한 배열 선언
    int targetCount[10] = { 0 };
    int guessCount[10] = { 0 };

    for (int i = 0; i < digitCount; ++i) {
        if (userGuess[i] == targetNumber[i]) {
            (*strikes)++;
        }
        else {
            // 중복된 숫자를 처리
            targetCount[targetNumber[i]]++;
            guessCount[userGuess[i]]++;
        }
    }

    for (int i = 0; i < 10; ++i) {
        *balls += (targetCount[i] < guessCount[i]) ? targetCount[i] : guessCount[i];
    }
}


void buyHint(int digitCount, int* score, int* targetNumber) {
	if (*score >= 10) {
		// 힌트 구매 가능한 경우
		*score -= 10; // 점수 차감

		int hintDigitCount = digitCount; // 힌트의 자릿수를 원래 숫자와 동일하게 설정

		// 힌트 배열에 다음 랜덤 숫자의 각 자릿수의 합 저장
		int* nextRandomNumber = malloc(digitCount * sizeof(int));
		generateRandomNumber(nextRandomNumber, digitCount);

		int sum = 0;
		for (int i = 0; i < digitCount; ++i) {
			sum += nextRandomNumber[i];
		}

		// 힌트 배열 동적 할당 및 각 자리에 할당
		int* hint = malloc(hintDigitCount * sizeof(int));
		for (int i = hintDigitCount - 1; i >= 0; --i) {
			hint[i] = sum % 10;
			sum /= 10;
		}

		// 힌트 출력
		printf("힌트: ");
		for (int i = 0; i < hintDigitCount; ++i) {
			printf("%d", hint[i]);
		}
		printf("\n");

		// 동적 할당한 메모리 해제
		free(nextRandomNumber);
		free(hint);
	}
	else {
		printf("보유 점수가 부족하여 힌트를 구매할 수 없습니다.\n");
		Sleep(1000);
	}
}









// showShop 함수 수정
void showShop(int* score, int digitCount, int* targetNumber) {
	printf("===== 상점 =====\n");
	printf("현재 보유 점수: %d\n", *score);
	printf("1. 힌트 구매 (10점)\n");
	printf("================\n");

	char choice;
	printf("상점에서 무엇을 구매하시겠습니까? (0: 나가기): ");

	// 입력 버퍼 비우기
	while (getchar() != '\n');

	scanf("%c", &choice);

	switch (choice) {
	case '1':
	case 'h':
	case 'H':
		buyHint(digitCount, &score, targetNumber);
		Sleep(1000);
		break;
	case '0':
		// 나가기
		break;
	default:
		printf("잘못된 선택입니다. 다시 선택하세요.\n");
		showShop(score, digitCount, targetNumber);
		break;
	}
}




void showAchievement(int attempts) {
    if (attempts == 1) {
        printf("Perfect! 1번만에 성공하셨습니다.\n");
    }
    else if (attempts == 2) {
        printf("Fantastic! 2번만에 성공하셨습니다.\n");
    }
    else if (attempts == 3) {
        printf("Amazing! 3번만에 성공하셨습니다.\n");
    }
    else if (attempts == 4) {
        printf("Excellent! 4번만에 성공하셨습니다.\n");
    }
    else if (attempts == 5) {
        printf("Well done! 5번만에 성공하셨습니다.\n");
    }
    else if (attempts == 6) {
        printf("Good job! 6번만에 성공하셨습니다.\n");
    }
    else {
        printf("Great! %d번 만에 성공하셨습니다.\n", attempts);
    }
}
void updateRanking(struct Player player) {
    FILE* file = fopen(RANKING_FILE, "a");
    if (file == NULL) {
        printf("랭킹 파일을 열 수 없습니다.\n");
        return;
    }

    fprintf(file, "%s %d\n", player.name, player.score); // 파일에 플레이어 정보 추가
    fclose(file); // 파일 닫기
}

void displayRanking() {
    FILE* file = fopen(RANKING_FILE, "r"); // 파일 열기 (읽기 모드)
    if (file == NULL) {
        printf("랭킹 파일을 열 수 없습니다.\n");
        return;
    }

    // 플레이어 항목을 배열로 읽어들임
    struct Player players[MAX_RANKING_ENTRIES];
    int numPlayers = 0;

    while (fscanf(file, "%s %d", players[numPlayers].name, &players[numPlayers].score) == 2) {
        numPlayers++;
        if (numPlayers >= MAX_RANKING_ENTRIES) {
            break;  // 배열 크기를 초과하지 않도록 함
        }
    }

    fclose(file); // 파일 닫기

    // 플레이어를 점수에 따라 내림차순으로 정렬
    qsort(players, numPlayers, sizeof(struct Player), comparePlayers);

    printf("\n===== 랭킹 =====\n");

    // 정렬된 플레이어를 출력
    for (int i = 0; i < numPlayers; i++) {
        printf("%s - %d점\n", players[i].name, players[i].score);
    }

    printf("================\n");
}
