#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <Windows.h>

void generateRandomNumber(int* number, int digitCount);
void getUserInput(int* guess, int digitCount);
void checkGuess(int* targetNumber, int* userGuess, int digitCount, int* strikes, int* balls);

int main() {
    int difficulty;
    int strikes, balls;
    int maxAttempts = 7;

    while (1) {
        printf("난이도를 선택하세요 (1: 3자리, 2: 4자리, 3: 5자리): ");
        scanf("%d", &difficulty);

        if (difficulty > 3) {
            printf("올바른 난이도를 선택하세요.\n");
            continue;
        }
        else if (difficulty > 0 && difficulty < 4) {
            break;
        }
    }

    int digitCount;

    switch (difficulty) {
    case 1:
        digitCount = 3;
        break;
    case 2:
        digitCount = 4;
        break;
    case 3:
        digitCount = 5;
        break;
    default:
        return 1;
    }

    srand(time(NULL));

    int* targetNumber;
    int* userGuess;

    while (1) {
        targetNumber = malloc(digitCount * sizeof(int));
        userGuess = malloc(digitCount * sizeof(int));

        generateRandomNumber(targetNumber, digitCount);

        printf("=== 숫자야구 게임 시작 (난이도: %d) ===\n", difficulty);

        int attempts = 0;
        do {
            getUserInput(userGuess, digitCount);
            checkGuess(targetNumber, userGuess, digitCount, &strikes, &balls);

            printf("스트라이크: %d, 볼: %d\n", strikes, balls);

            attempts++;

        } while (strikes != digitCount && attempts < maxAttempts);

        if (strikes == digitCount) {
            printf("축하합니다! 정답을 맞추셨습니다.\n");
        }
        else {
            printf("게임 오버! 정답은 ");
            for (int i = 0; i < digitCount; ++i) {
                printf("%d", targetNumber[i]);
            }
            printf("입니다.\n");
        }

        // 게임이 끝난 후 메모리 해제
        free(targetNumber);
        free(userGuess);

        // 사용자에게 다시 플레이할 것인지 물어보기
        char playAgain;
        printf("다시 플레이하시겠습니까? (y/n): ");
        scanf(" %c", &playAgain);

        if (playAgain != 'y' && playAgain != 'Y') {
            break; // 게임 종료
        }

        // 다시 할 경우 난이도 선택
        while (1) {
            printf("난이도를 선택하세요 (1: 3자리, 2: 4자리, 3: 5자리): ");
            scanf("%d", &difficulty);

            if (difficulty > 3) {
                printf("올바른 난이도를 선택하세요.\n");
                continue;
            }
            else if (difficulty > 0 && difficulty < 4) {
                break;
            }
        }

        // 다시 할 경우 메모리 재할당
        targetNumber = malloc(digitCount * sizeof(int));
        userGuess = malloc(digitCount * sizeof(int));

        // 게임 시작 메시지 다음에 빈 줄 출력
        system("cls");
    }

    return 0;
}

void generateRandomNumber(int* number, int digitCount) {
    for (int i = 0; i < digitCount; ++i) {
        number[i] = rand() % 10;
    }
}

void getUserInput(int* guess, int digitCount) {
    int validInput;

    do {
        validInput = 1; // 입력이 유효하다고 가정하고 시작

        printf("%d자리 숫자를 입력하세요: ", digitCount);

        for (int i = 0; i < digitCount; ++i) {
            if (scanf("%1d", &guess[i]) != 1) {
                printf("올바른 숫자를 입력하세요.\n");

                // 입력 버퍼 비우기
                int c;
                while ((c = getchar()) != '\n' && c != EOF);

                validInput = 0; // 입력이 유효하지 않음
                break;
            }
        }

        // 입력이 숫자가 아닌 문자를 포함하는지 확인
        if (validInput) {
            for (int i = 0; i < digitCount; ++i) {
                if (guess[i] < 0 || guess[i] > 9) {
                    printf("올바른 숫자를 입력하세요.\n");
                    validInput = 0; // 입력이 유효하지 않음
                    break;
                }
            }
        }

    } while (!validInput);
}

void checkGuess(int* targetNumber, int* userGuess, int digitCount, int* strikes, int* balls) {
    *strikes = 0;
    *balls = 0;

    // 배열을 통해 중복된 숫자를 처리하기 위한 배열 선언
    int targetCount[10] = { 0 };
    int guessCount[10] = { 0 };

    for (int i = 0; i < digitCount; ++i) {
        if (userGuess[i] == targetNumber[i]) {
            (*strikes)++;
        }
        else {
            // 중복된 숫자를 처리
            targetCount[targetNumber[i]]++;
            guessCount[userGuess[i]]++;
        }
    }

    for (int i = 0; i < 10; ++i) {
        *balls += (targetCount[i] < guessCount[i]) ? targetCount[i] : guessCount[i];
    }
}
